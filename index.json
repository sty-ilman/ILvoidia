[{"content":"Login ssh : ssh bandit10@bandit.labs.overthewire -p 2220 password : FGUW5ilLVJrxX9kMYMmlN4MgbpfMiqey Task : the password is inside a data.txt which is a base64 encoded file Theory Base64 is a binary-to-text encoding scheme. It can often be recognized by equal signs at the end of the data. However, this is not always the case. Linux has a command called base64 that allows for encoding and decoding in Base64. For decoding, we need to use the flag -d. Solution i decoded the file with : base64 -d data.txt ","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit10/","summary":"\u003ch2 id=\"login\"\u003eLogin\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit10@bandit.labs.overthewire -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003eFGUW5ilLVJrxX9kMYMmlN4MgbpfMiqey\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task-\"\u003eTask :\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ethe password is inside a \u003cem\u003edata.txt\u003c/em\u003e which is a base64 encoded file\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"theory\"\u003eTheory\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eBase64\u003c/strong\u003e is a binary-to-text encoding scheme. It can often be recognized by equal signs at the end of the data. However, this is not always the case. Linux has a command called \u003ccode\u003ebase64\u003c/code\u003e that allows for encoding and decoding in Base64. For decoding, we need to use the flag \u003ccode\u003e-d\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ei decoded the file with :\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ebase64 -d data.txt\n\u003c/code\u003e\u003c/pre\u003e","title":"Bandit 10 -\u003e 11"},{"content":"Login ssh : ssh bandit11@bandit.labs.overthewire -p 2220 password : dtR173fZKb0RRsDFSGsg2RWnpNVj3qRr Task : decode the text inside the file data.txt which is encoded with rot13 Theory rot13 is a simple old encoding algorithm where you just shit the letters by 13 positions Solution i used the command cat data.txt then used website called cyberChef and decode the content ","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit11/","summary":"\u003ch2 id=\"login\"\u003eLogin\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit11@bandit.labs.overthewire -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003edtR173fZKb0RRsDFSGsg2RWnpNVj3qRr\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task-\"\u003eTask :\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003edecode the text inside the file \u003cem\u003edata.txt\u003c/em\u003e which is encoded with rot13\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"theory\"\u003eTheory\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003erot13 is a simple old encoding algorithm where you just shit the letters by 13 positions\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ei used the command \u003ccode\u003ecat data.txt\u003c/code\u003e then used website called \u003ca href=\"https://gchq.github.io/CyberChef/\"\u003ecyberChef\u003c/a\u003e and decode the content\u003c/li\u003e\n\u003c/ul\u003e","title":"Bandit 11 -\u003e 12"},{"content":"Login ssh : ssh bandit12@bandit.labs.overthewire -p 2220 password : 7x16WNeHIi5YkIhWsfFIqoognUTyj9Q4 Task : the decompress a heavy compressed file to reach the password Theory Hexdumps are often used when we want to look at data that cannot be represented in strings and therefore is not readable, so it is easier to look at the hex values. A hexdump has three main columns. The first shows the address, the second the hex representation of the data on that address and the last shows the actual data as strings (with ‘.’ being hex values that cannot be represented as a string). Many hex editors exist just pick the one you like most.\nFor the command line xxd can be used. xxd \u0026lt;input_file\u0026gt; \u0026lt;output_file\u0026gt; creates hexdumps. When using the -r flag, it reverts the hexdump.\nHexdumps can be used to figure out the type of a file. Each file type has a magic number/file signature. You can find lists with a collection of these different file signatures online. The file command, which was introduced in Level 5 also uses this method (and more beyond that). This is especially important to know because sometimes files might not have the correct or any file ending to identify its type.\nCompression is a method of encoding that aims to reduce the original size of a file without losing information (or only losing as little as possible).\ngzip is a command to compress or decompress (-d) files. A ‘gzip’ file generally ends with .gz. bzip2 is another command which allows for compressing and decompressing (-d) files. A ‘bzip2’ file generally ends with .bz2. An Archive File is a file that contains one or multiple files and their metadata. This can allow easier portability.\ntar is a command that creates archive files (-cf). It also allows extracting these files again (-xf). A tar archive generally ends with .tar. x : tells the command to extract the files v : to show the progress (if there was many files (optional)) f : tells that the next argument gonna be the archive file Solution first of all i reversed the hexdump with the command xxd -r data.txt then what ever the result i get after that i used the command file to check the type of the file were i rename it first by adding the correct extention using the command mv then :\ngzip : use the command gunzip or gzip -d tar : use the command tar -xvf bzip2 : use the command bzip2 -d after several files you\u0026rsquo;d get a text which contains the password.\n","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit12/","summary":"\u003ch2 id=\"login\"\u003eLogin\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit12@bandit.labs.overthewire -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003e7x16WNeHIi5YkIhWsfFIqoognUTyj9Q4\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task-\"\u003eTask :\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ethe decompress a heavy compressed file to reach the password\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"theory\"\u003eTheory\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eHexdumps\u003c/strong\u003e are often used when we want to look at data that cannot be represented in strings and therefore is not readable, so it is easier to look at the hex values. A hexdump has three main columns. The first shows the address, the second the hex representation of the data on that address and the last shows the actual data as strings (with ‘.’ being hex values that cannot be represented as a string). Many hex editors exist just pick the one you like most.\u003c/p\u003e","title":"Bandit 12 -\u003e 13"},{"content":"Login ssh : ssh bandit13@bandit.labs.overthewire -p 2220 password : FO5dwFsc0cbaIiH0h8J2eUks2vdTDwAn Task : use a provided private key to connect to the next level, then find the password in the provided path /etc/bandit_pass/bandit14 Theory Until now, we have only logged into the remote machine using ssh with a password. An alternative to a password is using public-key cryptography. The public key is placed on the computers that should allow access (the remote host) to the user that owns the private key. Like with the password, it is important that only the user knows/owns the private key. The -i flag allows login with the private key. Solution connecting with the provided private key : ssh -i sshkey.private bandit14@localhost -p 2220 then use the cat command on the provided path to get the password ","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit13/","summary":"\u003ch2 id=\"login\"\u003eLogin\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit13@bandit.labs.overthewire -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003eFO5dwFsc0cbaIiH0h8J2eUks2vdTDwAn\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task-\"\u003eTask :\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003euse a provided private key to connect to the next level, then find the password in the provided path \u003ccode\u003e/etc/bandit_pass/bandit14\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"theory\"\u003eTheory\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eUntil now, we have only logged into the remote machine using \u003ccode\u003essh\u003c/code\u003e with a password. An alternative to a password is using public-key cryptography. The public key is placed on the computers that should allow access (the remote host) to the user that owns the private key. Like with the password, it is important that only the user knows/owns the private key. The \u003ccode\u003e-i\u003c/code\u003e flag allows login with the private key.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003econnecting with the provided private key :\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003essh -i sshkey.private bandit14@localhost -p 2220\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003ethen use the \u003ccode\u003ecat\u003c/code\u003e command  on the provided path to get the password\u003c/li\u003e\n\u003c/ul\u003e","title":"Bandit 13 -\u003e 14"},{"content":"Login ssh : ssh bandit14@bandit.labs.overthewire -p 2220 password : MU4VWeTyJk8ROof1qqmcBPaLh7lDCPvS Task : submit the current level password to localhost on port 30000 to get the wanted password Theory it this level we gonna use the nc or netcat command which allows us to write and read data over a network connection it can be used for TCP and UDP the command is nc \u0026lt;server\u0026gt; \u0026lt;port\u0026gt; Solution we just need to do the following : nc loalhost 30000 then we will have the option to submit the current level password. ","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit14/","summary":"\u003ch2 id=\"login\"\u003eLogin\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit14@bandit.labs.overthewire -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003eMU4VWeTyJk8ROof1qqmcBPaLh7lDCPvS\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task-\"\u003eTask :\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003esubmit the current level password to localhost on port 30000 to get the wanted password\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"theory\"\u003eTheory\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eit this level we gonna use the \u003ccode\u003enc\u003c/code\u003e or \u003ccode\u003enetcat\u003c/code\u003e command which allows us to write and read data over a network connection\u003c/li\u003e\n\u003cli\u003eit can be used for \u003ccode\u003eTCP\u003c/code\u003e and \u003ccode\u003eUDP\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ethe command is \u003ccode\u003enc \u0026lt;server\u0026gt; \u0026lt;port\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ewe just need to do the following :\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enc loalhost 30000\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003ethen we will have the option to submit the current level password.\u003c/li\u003e\n\u003c/ul\u003e","title":"Bandit 14 -\u003e 15"},{"content":"Login ssh : ssh bandit15@bandit.labs.overthewire -p 2220 password : 8xCjnmgoKbGLhHFAZlGE5Tmu4M2tKJQo Task : the password of the next level can be retrieved by submitting the current level password to localhost on port 30001 using the SSL encryption Theory SSL, or Secure Sockets Layer, is a security protocol that establishes an encrypted link between a web server and a browser, ensuring that all data passed between them remains private OpenSSL The command-line tool for using the OpenSSL cryptography library. It supports many sub-commands for encryption, certificates, SSL/TLS, etc. s_client A subcommand of openssl that acts as a generic SSL/TLS client. It allows you to connect to a server to test and inspect its SSL/TLS configuration. -connect \u0026lt;server\u0026gt;:\u0026lt;port\u0026gt; Specifies the host-name (or IP) and port of the server to connect to. The format is host:port. For example: -connect google.com:443 will attempt to initiate an SSL/TLS handshake with Google\u0026rsquo;s HTTPS server. Solution first i got the current level password , if you did not save it somewhere you can always find it in /etc/bandit_pass/bandit15 then i used the following command : openssl s_client -connect localhost:30001 after getting a response you\u0026rsquo;d submit the password to solve the level. ","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit15/","summary":"\u003ch2 id=\"login\"\u003eLogin\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit15@bandit.labs.overthewire -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003e8xCjnmgoKbGLhHFAZlGE5Tmu4M2tKJQo\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task-\"\u003eTask :\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ethe password of the next level can be retrieved by submitting the current level password to localhost on port 30001 using the \u003ccode\u003eSSL\u003c/code\u003e encryption\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"theory\"\u003eTheory\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSSL\u003c/code\u003e, or Secure Sockets Layer, is a security protocol that establishes an encrypted link between a web server and a browser, ensuring that all data passed between them remains private\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eOpenSSL\u003c/code\u003e The command-line tool for using the \u003cstrong\u003eOpenSSL\u003c/strong\u003e cryptography library. It supports many sub-commands for encryption, certificates, SSL/TLS, etc.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003es_client\u003c/code\u003e A subcommand of \u003ccode\u003eopenssl\u003c/code\u003e that acts as a \u003cstrong\u003egeneric SSL/TLS client\u003c/strong\u003e. It allows you to connect to a server to test and inspect its SSL/TLS configuration.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-connect \u0026lt;server\u0026gt;:\u0026lt;port\u0026gt;\u003c/code\u003e Specifies the \u003cstrong\u003ehost-name (or IP)\u003c/strong\u003e and \u003cstrong\u003eport\u003c/strong\u003e of the server to connect to. The format is \u003ccode\u003ehost:port\u003c/code\u003e. For example:  \u003ccode\u003e-connect google.com:443\u003c/code\u003e will attempt to initiate an SSL/TLS handshake with Google\u0026rsquo;s HTTPS server.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003efirst i got the current level password , if you did not save it somewhere you can always find it in \u003ccode\u003e/etc/bandit_pass/bandit15\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ethen i used the following command :\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eopenssl s_client -connect localhost:30001\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003eafter getting a response you\u0026rsquo;d submit the password to solve the level.\u003c/li\u003e\n\u003c/ul\u003e","title":"Bandit 15 -\u003e 16"},{"content":"Login ssh : ssh bandit16@bandit.labs.overthewire -p 2220 password : kSkvUpMQ7lBYyCM4GBPvCvT1BfWRy0Dx Task : you can connect to the next level by submitting the current level password on localhost on a random port between 31000 and 32000 that uses ssl Theory nmap is a network scanner. It can do Host Discovery, Port Scanning, Version Detection (Service Detection) and a lot more. For this task, we use the flag -p to lets us choose which ports to scan. By default, nmap scans the top 1000 ports (not the first 1000 ports). Use -p- to scan all 65535 ports. The -sV flag lets us do a service/version detection scan. It is possible to make Nmap perform all possible scans with the -A flag this will take a while though. A full scan would have the following command: nmap -p- -A \u0026lt;host\u0026gt;, where \u0026lt;host\u0026gt; could be either an IP address or the name. Solution I used nmap to search for the right port : nmap -sV localhost -p 31000-32000 and this will be displayed :\nPORT STATE SERVICE VERSION 31046/tcp open echo 31518/tcp open ssl/echo 31691/tcp open echo 31790/tcp open ssl/unknown 31960/tcp open echo I noticed that we found 2 ports that use ssl one is just echos which means it\u0026rsquo;s note the right one, and the other is unknown.\ni used the next command to connect to the localhost :\nncat localhost --ssl 31790 i got a private key ,first i had to create a file with mktemp -d. it would be created with a random name in the /tmp directory ,I moved to there and created a file with the name sshkey.private and copy the key inside it.\nthen I connected to the next level with the following command :\nssh -i sshkey.privete bandit.labs.overthewire.org -p 2220 as always you can find the password of the current level in the directory /etc/bandit_pass/banditXX ","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit16/","summary":"\u003ch2 id=\"login\"\u003eLogin\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit16@bandit.labs.overthewire -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003ekSkvUpMQ7lBYyCM4GBPvCvT1BfWRy0Dx\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task-\"\u003eTask :\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eyou can connect to the next level by submitting the current level password on localhost on a random port between 31000 and 32000 that uses \u003ccode\u003essl\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"theory\"\u003eTheory\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003enmap\u003c/code\u003e is a network scanner. It can do Host Discovery, Port Scanning, Version Detection (Service Detection) and a lot more. For this task, we use the flag \u003ccode\u003e-p\u003c/code\u003e to lets us choose which ports to scan.\u003c/li\u003e\n\u003cli\u003eBy default, nmap scans the top 1000 ports (not the first 1000 ports). Use \u003ccode\u003e-p-\u003c/code\u003e to scan all 65535 ports. The \u003ccode\u003e-sV\u003c/code\u003e flag lets us do a service/version detection scan. It is possible to make Nmap perform all possible scans with the \u003ccode\u003e-A\u003c/code\u003e flag this will take a while though. A full scan would have the following command: \u003ccode\u003enmap -p- -A \u0026lt;host\u0026gt;\u003c/code\u003e, where \u003ccode\u003e\u0026lt;host\u0026gt;\u003c/code\u003e could be either an IP address or the name.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eI used nmap to search for the right port :\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enmap -sV localhost -p 31000-32000\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eand this will be displayed :\u003c/p\u003e","title":"Bandit 16 -\u003e 17"},{"content":"Login ssh : ssh bandit17@bandit.labs.overthewire -p 2220 password : EReVavePLFHtFlFsjn3hyzMlvSuSAcRD Task : to get the next level password we have to find the updated line between the 2 provided files Theory the command diff is used to get any differences between 2 files Solution diff password.old password.new this command will give us the difference it finds where it will display the different lines in the order of the given files. ","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit17/","summary":"\u003ch2 id=\"login\"\u003eLogin\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit17@bandit.labs.overthewire -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003eEReVavePLFHtFlFsjn3hyzMlvSuSAcRD\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task-\"\u003eTask :\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eto get the next level password we have to find the updated line between the 2 provided files\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"theory\"\u003eTheory\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ethe command \u003ccode\u003ediff\u003c/code\u003e is used to get any differences between 2 files\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ediff password.old password.new\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003ethis command will give us the difference it finds where it will display the different lines in the order of the given files.\u003c/li\u003e\n\u003c/ul\u003e","title":"Bandit 17 -\u003e 18"},{"content":"Login ssh : ssh bandit18@bandit.labs.overthewire -p 2220 password : x2gLTTjFwMOhQ8oWNbMN362QKxfRqGlO Task : to get the next level password you have to read the readme file Theory .bashrc is a file that runs every time a terminal is loaded. This means it is also run when logging in through SSH because this also loads a terminal. a new thing about ssh is that it does not just allows us to remotely connect to another machine but it lets us to run a command just after the common shh expression. Solution as mentioned in the level that thhappenese .bashrc file is modified to log us out just after we connect with ssh , so what I\u0026rsquo;ve done is i included the command cat with the ssh expression to read the file before the logout happens ssh bandit18@bandit.labs.overthewire.org -p 2220 \u0026#39;cat readme\u0026#39; i found and another alternative is to run or -t /bin/sh to open a pseudo-terminal ","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit18/","summary":"\u003ch2 id=\"login\"\u003eLogin\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit18@bandit.labs.overthewire -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003ex2gLTTjFwMOhQ8oWNbMN362QKxfRqGlO\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task-\"\u003eTask :\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eto get the next level password you have to read the \u003cem\u003ereadme\u003c/em\u003e file\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"theory\"\u003eTheory\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003e.bashrc\u003c/em\u003e is a file that runs every time a terminal is loaded. This means it is also run when logging in through SSH because this also loads a terminal.\u003c/li\u003e\n\u003cli\u003ea new thing about \u003ccode\u003essh\u003c/code\u003e is that it does not just allows us to remotely connect to another machine but it lets us to run a command just after the common \u003ccode\u003eshh\u003c/code\u003e expression.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eas mentioned in the level that thhappenese \u003cem\u003e.bashrc\u003c/em\u003e file is modified to log us out just after we connect with \u003ccode\u003essh\u003c/code\u003e , so what I\u0026rsquo;ve done is i included the command \u003ccode\u003ecat\u003c/code\u003e with the \u003ccode\u003essh\u003c/code\u003e expression to read the file before the logout happens\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003essh bandit18@bandit.labs.overthewire.org -p 2220 \u0026#39;cat readme\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003ei found and another alternative is to run  or \u003ccode\u003e-t /bin/sh\u003c/code\u003e to open a \u003cem\u003epseudo-terminal\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Bandit 18 -\u003e 19"},{"content":"Login ssh : ssh bandit9@bandit.labs.overthewire -p 2220 password : 4CKMh1JI91bUIZZPXDqGanal4xvAg0JM Task : fine a the password inside a file data.txt , that is located next to some equal signs Solution after running the command file data.txt we notice that file data.txt is not a text file it is a binary file, to fix that we gonna use the command strings which can turn data into readable characters then with the pipe command | we find the password with grep strings data.txt | grep = ","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit9/","summary":"\u003ch2 id=\"login\"\u003eLogin\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit9@bandit.labs.overthewire -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003e4CKMh1JI91bUIZZPXDqGanal4xvAg0JM\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task-\"\u003eTask :\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003efine a the password inside a file \u003ccode\u003edata.txt\u003c/code\u003e , that is located next to some equal signs\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eafter running the command \u003ccode\u003efile data.txt\u003c/code\u003e we notice that file \u003ccode\u003edata.txt\u003c/code\u003e is not a text file it is a binary file,\u003c/li\u003e\n\u003cli\u003eto fix that we gonna use the command \u003ccode\u003estrings\u003c/code\u003e which can turn data into  readable characters\u003c/li\u003e\n\u003cli\u003ethen with the pipe command \u003ccode\u003e|\u003c/code\u003e we find the password with \u003ccode\u003egrep\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003estrings data.txt | grep =\n\u003c/code\u003e\u003c/pre\u003e","title":"Bandit 9 -\u003e 10"},{"content":"Login ssh : ssh bandit2@bandit.labs.overthewire.org -p 2220 password : 263JGJPfgU6LtdEvgfWU1XP5yac29mFx Task read form a file that contains spaces in its name Solution the answer is you either skip the spaces using a \\ cat ./space\\ in\\ this\\ filename or you may also open it like this :\ncat \u0026#34;space in this filename\u0026#34; ","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit2/","summary":"\u003ch2 id=\"login\"\u003eLogin\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit2@bandit.labs.overthewire.org -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003e263JGJPfgU6LtdEvgfWU1XP5yac29mFx\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task\"\u003eTask\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eread form a file that contains spaces in its name\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ethe answer is you either skip the spaces using a \u003ccode\u003e\\\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecat ./space\\ in\\ this\\ filename\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eor you may also open it like this :\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecat \u0026#34;space in this filename\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e","title":"Bandit 2 -\u003e 3"},{"content":"Login ssh : ssh bandit3@bandit.labs.overthewire -p 2220 password : MNk8KNH3Usiio41PRUEoDFPqfxLPlSmx Task find the hidden file to get the next level password Solution cd inhere ls -la ","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit3/","summary":"\u003ch2 id=\"login\"\u003eLogin\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit3@bandit.labs.overthewire -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003eMNk8KNH3Usiio41PRUEoDFPqfxLPlSmx\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task\"\u003eTask\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003efind  the hidden file to get the  next level password\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecd inhere\nls -la\n\u003c/code\u003e\u003c/pre\u003e","title":"Bandit 3 -\u003e 4"},{"content":"Login ssh : ssh bandit4@bandit.labs.overthewire -p 2220 password : 2WmrDFRmJIq3IPxneAaMGhap0pFhF3NJ Task find the human readable file in the inhere directory Solution as the in the bandit2 level all the files starts with - which means if we gonna use them I have to start each one with ./ . in this level I used the command file the check which file is human readable which means it should contain text to select all files all at once we gonna use the * cd inhere file ./* this should display all the files with their type ","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit4/","summary":"\u003ch2 id=\"login\"\u003eLogin\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit4@bandit.labs.overthewire -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003e2WmrDFRmJIq3IPxneAaMGhap0pFhF3NJ\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task\"\u003eTask\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003efind the human readable file in the \u003cem\u003einhere\u003c/em\u003e directory\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eas the in the bandit2 level all the files starts with \u003ccode\u003e-\u003c/code\u003e which means if we gonna use them I have to start each one with \u003ccode\u003e./\u003c/code\u003e .\u003c/li\u003e\n\u003cli\u003ein this level I used the command \u003ccode\u003efile\u003c/code\u003e the check which file is human readable which means it should contain text\u003c/li\u003e\n\u003cli\u003eto select all files all at once we gonna use the \u003ccode\u003e*\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecd inhere\nfile ./*\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003ethis should display all the files with their type\u003c/li\u003e\n\u003c/ul\u003e","title":"Bandit 4 -\u003e 5"},{"content":"Login ssh : ssh bandit5@bandit.labs.overthewire -p 2220 password : 4oQYVPkxZOOEOO5pTW81FB8j8lxXGUQw Task the goal is to find a file that is human readable and has a size of 1033 bytes among a lof of files and directories Solution in this solution I used the command find with 2 parameters which are : -readable to find any file that is readable for humans (which means a text file) -size \u0026lt;size\u0026gt;\u0026lt;unit\u0026gt; , to specify the file size, we have to replace the \u0026lt;...\u0026gt; with the correct values , the \u0026lt;unit\u0026gt; part is gonna be replaced with c (check the man for more details) cd inhere find -readable -size 1033c ","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit5/","summary":"\u003ch2 id=\"login\"\u003eLogin\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit5@bandit.labs.overthewire -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003e4oQYVPkxZOOEOO5pTW81FB8j8lxXGUQw\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task\"\u003eTask\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ethe goal is to find a file that is human readable and has a size of 1033 bytes among a lof of files and directories\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ein this solution I used the command \u003ccode\u003efind\u003c/code\u003e with 2 parameters which are :\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e-readable\u003c/code\u003e to find any file that is readable for humans (which means a text file)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-size \u0026lt;size\u0026gt;\u0026lt;unit\u0026gt;\u003c/code\u003e , to specify the file size, we have to replace the \u003ccode\u003e\u0026lt;...\u0026gt;\u003c/code\u003e with the correct values , the \u003ccode\u003e\u0026lt;unit\u0026gt;\u003c/code\u003e part is gonna be replaced with \u003ccode\u003ec\u003c/code\u003e (check the \u003ccode\u003eman\u003c/code\u003e for more details)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecd inhere\nfind -readable -size 1033c\n\u003c/code\u003e\u003c/pre\u003e","title":"Bandit 5 -\u003e 6"},{"content":"Login ssh : ssh bandit6@bandit.labs.overthewire -p 2220 password : HWasnPhtq9AVKe0dmk45nxy20cvUa6EG Task : the goal is to find a file locate somewhere on the server Solution as the previous level I used the command find but first we need to go to the root directory , cus there is no hints about the file\u0026rsquo;s location cd / after that I used the find command with the following parameters : -user \u0026lt;user\u0026gt; : to specify the owner of the file -group \u0026lt;group\u0026gt; to specify the group that the files belongs to -size \u0026lt;size\u0026gt;\u0026lt;unit\u0026gt; : to specify the file size I run this command from the root directory and since there is a lot of files that we can\u0026rsquo;t access the screen will be full of permission denied messages, to get rid of them we gonna use the [[Linux Commands#the errors stream (stderr)|stderr]] to redirect them to /dev/null file to clean the screen and catch the wanted file\nfind -user bandit7 -group bandit6 -size 33c 2\u0026gt; /dev/null ","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit6/","summary":"\u003ch2 id=\"login\"\u003eLogin\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit6@bandit.labs.overthewire -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003eHWasnPhtq9AVKe0dmk45nxy20cvUa6EG\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task-\"\u003eTask :\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ethe goal is to find a file locate somewhere on the server\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eas the previous level I used the command \u003ccode\u003efind\u003c/code\u003e but first we need to go to the root directory , cus there is no hints about the file\u0026rsquo;s location\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecd /\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003eafter that I used the \u003ccode\u003efind\u003c/code\u003e command with the following parameters :\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e-user \u0026lt;user\u0026gt;\u003c/code\u003e : to specify the owner of the file\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-group \u0026lt;group\u0026gt;\u003c/code\u003e to specify the group that the files belongs to\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-size \u0026lt;size\u0026gt;\u0026lt;unit\u0026gt;\u003c/code\u003e : to specify the file size\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI run this command from the root directory and since there is a lot of files that we can\u0026rsquo;t access the screen will be full of \u003cem\u003epermission denied\u003c/em\u003e messages,\nto get rid of them we gonna use the [[Linux Commands#the errors stream (\u003ccode\u003estderr\u003c/code\u003e)|stderr]] to redirect them to /dev/null file to clean the screen and catch the wanted file\u003c/p\u003e","title":"Bandit 6 -\u003e 7"},{"content":"Login ssh : ssh bandit7@bandit.labs.overthewire -p 2220 password : morbNTDkSW6jIlUc0ymOdMaLnOlFVAaj Task : find the password inside a big file, which is next to the word millionth Solution I used the command grep to catch the wanted line grep millionth ","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit7/","summary":"\u003ch2 id=\"login\"\u003eLogin\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit7@bandit.labs.overthewire -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003emorbNTDkSW6jIlUc0ymOdMaLnOlFVAaj\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task-\"\u003eTask :\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003efind the password inside a big file, which is next to the word \u003cem\u003emillionth\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eI used the command \u003ccode\u003egrep\u003c/code\u003e to catch the wanted line\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egrep millionth\n\u003c/code\u003e\u003c/pre\u003e","title":"Bandit 7 -\u003e 8"},{"content":"Login ssh : ssh bandit8@bandit.labs.overthewire -p 2220 password : dfwvzFQi4mU0wfNbFOe9RoWskMLg7eEc Task : find the password in a file , the hint is the password is the only one that occurs once Solution I used the sort command to sort the list of line the using the | combining it to the uniq -c command which removes all the duplicates and with the parameter -c it will display the numbers of occurrences of each line, following with | to the grep command where we gonna look for 1 sort data.txt | uniq -c | grep 1 ","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit8/","summary":"\u003ch2 id=\"login\"\u003eLogin\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit8@bandit.labs.overthewire -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003edfwvzFQi4mU0wfNbFOe9RoWskMLg7eEc\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task-\"\u003eTask :\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003efind the password in a file , the hint is the password is the only one that occurs once\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eI used the \u003ccode\u003esort\u003c/code\u003e command to sort the list of line the\u003c/li\u003e\n\u003cli\u003eusing the \u003ccode\u003e|\u003c/code\u003e combining it to the \u003ccode\u003euniq -c\u003c/code\u003e command which removes all the duplicates and with the parameter \u003ccode\u003e-c\u003c/code\u003e it will display the numbers of occurrences of each line,\u003c/li\u003e\n\u003cli\u003efollowing with \u003ccode\u003e|\u003c/code\u003e  to the \u003ccode\u003egrep\u003c/code\u003e command where we gonna look for \u003cem\u003e1\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esort data.txt | uniq -c | grep 1\n\u003c/code\u003e\u003c/pre\u003e","title":"Bandit 8 -\u003e 9"},{"content":"Login : ssh : ssh bandit0@bandit.labs.overthewire.org -p 2220 password : bandit0 Task : in this level the goal is to try to log in using SSH with the provided credentials Theory : SSH (secure shell protocol) , is a network protocol used to remotely connect to another machine .\nIn Linux, you can remotly connect to another machine using the command ssh with :\nssh \u0026lt;username\u0026gt;@\u0026lt;server\u0026gt; -p \u0026lt;port\u0026gt; the parts with \u0026lt;..\u0026gt; needs to be replaced with the correct informations the \u0026lt;server\u0026gt; needs to be replaced with the valid URL or the IP address the -p is used to be able to set the correct port Solution : the informations provided will lead you to the following command :\nssh bandit0@bandit.labs.overthewire.org -p 2220 with this command you will be prompted for the password. after successful log in using the command you\u0026rsquo;d find the file readme which you\u0026rsquo;d read using the command cat to get the password of the next level\n","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit0/","summary":"\u003ch2 id=\"login-\"\u003eLogin :\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit0@bandit.labs.overthewire.org -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003ebandit0\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task-\"\u003eTask :\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ein this level the goal is to try to log in using SSH with the provided credentials\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"theory-\"\u003eTheory :\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eSSH (secure shell protocol) , is a network protocol used to remotely connect to another machine .\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn Linux, you can remotly connect to another machine using the command \u003ccode\u003essh\u003c/code\u003e with :\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003essh \u0026lt;username\u0026gt;@\u0026lt;server\u0026gt; -p \u0026lt;port\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cul\u003e\n\u003cli\u003ethe parts with \u003ccode\u003e\u0026lt;..\u0026gt;\u003c/code\u003e needs to be replaced with the correct informations\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ethe \u003ccode\u003e\u0026lt;server\u0026gt;\u003c/code\u003e needs to be replaced with the valid URL or the IP address\u003c/li\u003e\n\u003cli\u003ethe \u003ccode\u003e-p\u003c/code\u003e is used to be able to set the correct port\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution-\"\u003eSolution :\u003c/h2\u003e\n\u003cp\u003ethe informations provided will lead you to the following command :\u003c/p\u003e","title":"Bandit 0 -\u003e 1"},{"content":"Login ssh : ssh bandit1@bandit.labs.overthewire.org -p 2220 password : ZjLjTmM6FvvyRnrb2rfNWOZOTa6ip5If Task the goal of this games is to read the password from a particular file - Theory the - is a special shortcut that means : treat the terminal content as the file for example: cat - after this command you\u0026rsquo;d have to type something into the screen , when you type enter it will print what you\u0026rsquo;ve printed\nso if you find it as a file name it can confuse the programs. Solution to read a file that was named - you have to pass it as a path not just the name , so the answer will be : cat ./- ","permalink":"https://sty-ilman.github.io/ILvoidia/posts/bandit1/","summary":"\u003ch2 id=\"login\"\u003eLogin\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003essh : \u003ccode\u003essh bandit1@bandit.labs.overthewire.org -p 2220\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003epassword : \u003ccode\u003eZjLjTmM6FvvyRnrb2rfNWOZOTa6ip5If\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"task\"\u003eTask\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ethe goal of this games is to read the password from a particular file \u003ccode\u003e-\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"theory\"\u003eTheory\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ethe \u003ccode\u003e-\u003c/code\u003e is a special shortcut that means : treat the terminal content as the file for example:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecat -\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eafter this command you\u0026rsquo;d have to type something into the screen , when you type \u003cem\u003eenter\u003c/em\u003e it will print what you\u0026rsquo;ve printed\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eso if you find it as a file name it can confuse the programs.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eto read a file that was named \u003ccode\u003e-\u003c/code\u003e you have to pass it as a path not just the name , so the answer will be :\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecat ./-\n\u003c/code\u003e\u003c/pre\u003e","title":"Bandit 1 -\u003e 2"},{"content":"I\u0026rsquo;ve started working through the OverTheWire wargames.\nThey\u0026rsquo;re a set of CTF-style challenges focused on Linux, networking, and basic hacking concepts. I\u0026rsquo;ll be going through them one by one and writing short notes as I go.\nThe goal is to learn by doing — improve my command line skills, understand system behavior better, and build a stronger foundation in cybersecurity.\nEach post will follow the same structure:\nLogin Info: SSH details and setup Task: What the level asks Theory: Concepts or tools involved Solution: Step-by-step how I solved it I’m starting with the first game, Bandit. It’s beginner-friendly and builds up from simple file handling to more advanced concepts.\nFirst post: Bandit Level 0 → Level 1 — coming next.\n","permalink":"https://sty-ilman.github.io/ILvoidia/projects/overthewire/","summary":"\u003cp\u003eI\u0026rsquo;ve started working through the \u003ca href=\"https://overthewire.org/wargames/\"\u003eOverTheWire\u003c/a\u003e wargames.\u003c/p\u003e\n\u003cp\u003eThey\u0026rsquo;re a set of CTF-style challenges focused on Linux, networking, and basic hacking concepts. I\u0026rsquo;ll be going through them one by one and writing short notes as I go.\u003c/p\u003e\n\u003cp\u003eThe goal is to learn by doing — improve my command line skills, understand system behavior better, and build a stronger foundation in cybersecurity.\u003c/p\u003e\n\u003cp\u003eEach post will follow the same structure:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eLogin Info\u003c/strong\u003e: SSH details and setup\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTask\u003c/strong\u003e: What the level asks\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTheory\u003c/strong\u003e: Concepts or tools involved\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSolution\u003c/strong\u003e: Step-by-step how I solved it\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI’m starting with the first game, \u003cstrong\u003eBandit\u003c/strong\u003e. It’s beginner-friendly and builds up from simple file handling to more advanced concepts.\u003c/p\u003e","title":"Starting My OverTheWire Journey"}]